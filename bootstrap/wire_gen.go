// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	v1 "github.com/supuwoerc/weaver/api/v1"
	attachment2 "github.com/supuwoerc/weaver/api/v1/attachment"
	captcha3 "github.com/supuwoerc/weaver/api/v1/captcha"
	department2 "github.com/supuwoerc/weaver/api/v1/department"
	permission2 "github.com/supuwoerc/weaver/api/v1/permission"
	ping2 "github.com/supuwoerc/weaver/api/v1/ping"
	role2 "github.com/supuwoerc/weaver/api/v1/role"
	user2 "github.com/supuwoerc/weaver/api/v1/user"
	"github.com/supuwoerc/weaver/initialize"
	"github.com/supuwoerc/weaver/middleware"
	cache2 "github.com/supuwoerc/weaver/pkg/cache"
	"github.com/supuwoerc/weaver/pkg/captcha"
	"github.com/supuwoerc/weaver/pkg/consul"
	"github.com/supuwoerc/weaver/pkg/job"
	"github.com/supuwoerc/weaver/pkg/jwt"
	"github.com/supuwoerc/weaver/pkg/logger"
	"github.com/supuwoerc/weaver/pkg/utils"
	"github.com/supuwoerc/weaver/providers"
	"github.com/supuwoerc/weaver/repository/cache"
	"github.com/supuwoerc/weaver/repository/dao"
	"github.com/supuwoerc/weaver/router"
	"github.com/supuwoerc/weaver/service"
	"github.com/supuwoerc/weaver/service/attachment"
	captcha2 "github.com/supuwoerc/weaver/service/captcha"
	"github.com/supuwoerc/weaver/service/department"
	"github.com/supuwoerc/weaver/service/permission"
	"github.com/supuwoerc/weaver/service/ping"
	"github.com/supuwoerc/weaver/service/role"
	"github.com/supuwoerc/weaver/service/user"
)

// Injectors from wire.go:

func WireApp() *App {
	viper := initialize.NewViper()
	consulConfig := initialize.LoadConsulConfig(viper)
	client := initialize.NewConsulClient(consulConfig)
	config := initialize.LoadConfig(viper, client)
	writeSyncer := initialize.NewWriterSyncer(config)
	sugaredLogger := initialize.NewZapLogger(config, writeSyncer)
	loggerLogger := logger.NewLogger(sugaredLogger)
	dialer := initialize.NewDialer(config)
	emailClient := initialize.NewEmailClient(loggerLogger, dialer, config)
	cronLogger := initialize.NewCronLogger(loggerLogger, emailClient)
	cron := initialize.NewCronClient(cronLogger)
	v := providers.SystemJobs(loggerLogger)
	systemJobManager := job.NewSystemJobManager(cronLogger, cron, loggerLogger, v...)
	gormLogger := initialize.NewGormLogger(loggerLogger, config)
	db := initialize.NewGORM(config, gormLogger)
	redisLogger := initialize.NewRedisLogger(loggerLogger, config)
	commonRedisClient := initialize.NewRedisClient(redisLogger, config)
	redisLocksmith := utils.NewRedisLocksmith(loggerLogger, commonRedisClient)
	basicService := service.NewBasicService(loggerLogger, db, redisLocksmith, config, emailClient)
	basicDAO := dao.NewBasicDao(db)
	departmentDAO := dao.NewDepartmentDAO(basicDAO)
	departmentCache := cache.NewDepartmentCache(commonRedisClient)
	userDAO := dao.NewUserDAO(basicDAO)
	departmentService := department.NewDepartmentService(basicService, departmentDAO, departmentCache, userDAO)
	permissionDAO := dao.NewPermissionDAO(basicDAO)
	rolePermissionDAO := dao.NewRolePermissionDAO(basicDAO)
	roleDAO := dao.NewRoleDAO(basicDAO)
	permissionService := permission.NewPermissionService(basicService, permissionDAO, rolePermissionDAO, roleDAO)
	v2 := providers.SystemCaches(departmentService, permissionService)
	systemCacheManager := cache2.NewSystemCacheManager(v2...)
	elasticsearchLogger := initialize.NewElasticsearchLogger(loggerLogger, config)
	typedClient := initialize.NewElasticsearchClient(config, elasticsearchLogger)
	serviceRegister := consul.NewServiceRegistry(client, emailClient, loggerLogger)
	engine := initialize.NewEngine(emailClient, commonRedisClient, loggerLogger, config)
	httpServer := initialize.NewHttpServer(config, engine, loggerLogger)
	exporter := initialize.NewOTLPExporter(config)
	tracerProvider := initialize.NewTracerProvider(config, exporter)
	routerGroup := router.NewRouter(engine)
	userCache := cache.NewUserCache(commonRedisClient)
	tokenBuilder := jwt.NewJwtBuilder(db, commonRedisClient, config, userCache)
	authMiddleware := middleware.NewAuthMiddleware(config, userCache, tokenBuilder, permissionDAO)
	basicApi := v1.NewBasicApi(routerGroup, loggerLogger, config, authMiddleware)
	attachmentDAO := dao.NewAttachmentDAO(basicDAO)
	s3Client := initialize.NewS3Client(config)
	s3CompatibleStorage := initialize.NewS3CompatibleStorage(config, s3Client)
	attachmentService := attachment.NewAttachmentService(basicService, attachmentDAO, s3CompatibleStorage)
	api := attachment2.NewAttachmentApi(basicApi, attachmentService)
	redisStore := captcha.NewRedisStore(commonRedisClient, config)
	captchaService := captcha2.NewCaptchaService(redisStore)
	captchaApi := captcha3.NewCaptchaApi(basicApi, captchaService)
	departmentApi := department2.NewDepartmentApi(basicApi, departmentService)
	permissionApi := permission2.NewPermissionApi(basicApi, permissionService)
	pingService := ping.NewPingService(basicService)
	pingApi := ping2.NewPingApi(basicApi, pingService)
	roleService := role.NewRoleService(basicService, roleDAO, userDAO, permissionDAO)
	roleApi := role2.NewRoleApi(basicApi, roleService)
	userService := user.NewUserService(basicService, captchaService, userDAO, userCache, tokenBuilder)
	userApi := user2.NewUserApi(basicApi, userService)
	app := &App{
		logger:              loggerLogger,
		conf:                config,
		jobManager:          systemJobManager,
		cacheManager:        systemCacheManager,
		elasticsearchClient: typedClient,
		consulClient:        client,
		serviceRegister:     serviceRegister,
		httpServer:          httpServer,
		traceSpanExporter:   exporter,
		tracerProvider:      tracerProvider,
		attachmentApi:       api,
		captchaApi:          captchaApi,
		departmentApi:       departmentApi,
		permissionApi:       permissionApi,
		pingApi:             pingApi,
		roleApi:             roleApi,
		userApi:             userApi,
	}
	return app
}

func WireCli() *Cli {
	viper := initialize.NewViper()
	consulConfig := initialize.LoadConsulConfig(viper)
	client := initialize.NewConsulClient(consulConfig)
	config := initialize.LoadConfig(viper, client)
	writeSyncer := initialize.NewWriterSyncer(config)
	sugaredLogger := initialize.NewZapLogger(config, writeSyncer)
	loggerLogger := logger.NewLogger(sugaredLogger)
	cli := &Cli{
		Logger: loggerLogger,
		Conf:   config,
	}
	return cli
}
