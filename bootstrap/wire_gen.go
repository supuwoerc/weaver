// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"gin-web/api/v1"
	"gin-web/initialize"
	"gin-web/middleware"
	cache2 "gin-web/pkg/cache"
	"gin-web/pkg/captcha"
	"gin-web/pkg/email"
	"gin-web/pkg/job"
	"gin-web/pkg/jwt"
	"gin-web/pkg/utils"
	"gin-web/providers"
	"gin-web/repository"
	"gin-web/repository/cache"
	"gin-web/repository/dao"
	"gin-web/router"
	"gin-web/service"
)

// Injectors from wire.go:

func WireApp() *App {
	config := initialize.NewViper()
	writeSyncer := initialize.NewWriterSyncer(config)
	sugaredLogger := initialize.NewZapLogger(config, writeSyncer)
	dialer := initialize.NewDialer(config)
	client := email.NewEmailClient(sugaredLogger, dialer, config)
	cronLogger := initialize.NewCronLogger(sugaredLogger, client)
	cron := initialize.NewCronClient(cronLogger)
	v := providers.SystemJobs(sugaredLogger)
	systemJobManager := job.NewSystemJobManager(cronLogger, cron, sugaredLogger, v...)
	db := initialize.NewGORM(config)
	commonRedisClient := initialize.NewRedisClient(writeSyncer, config)
	redisLocksmith := utils.NewRedisLocksmith(sugaredLogger, commonRedisClient, client)
	basicService := service.NewBasicService(sugaredLogger, db, redisLocksmith, config, client)
	basicDAO := dao.NewBasicDao(db)
	departmentDAO := dao.NewDepartmentDAO(basicDAO)
	departmentCache := cache.NewDepartmentCache(commonRedisClient)
	departmentRepository := repository.NewDepartmentRepository(departmentDAO, departmentCache)
	userDAO := dao.NewUserDAO(basicDAO)
	userCache := cache.NewUserCache(commonRedisClient)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	departmentService := service.NewDepartmentService(basicService, departmentRepository, userRepository)
	permissionDAO := dao.NewPermissionDAO(basicDAO)
	permissionRepository := repository.NewPermissionRepository(permissionDAO)
	roleDAO := dao.NewRoleDAO(basicDAO)
	roleRepository := repository.NewRoleRepository(roleDAO)
	permissionService := service.NewPermissionService(basicService, permissionRepository, roleRepository)
	v2 := providers.SystemCaches(departmentService, permissionService)
	systemCacheManager := cache2.NewSystemCacheManager(v2...)
	engine := initialize.NewEngine(writeSyncer, client, sugaredLogger, config)
	httpServer := initialize.NewServer(config, engine, sugaredLogger)
	routerGroup := router.NewRouter(engine, config)
	attachmentDAO := dao.NewAttachmentDAO(basicDAO)
	attachmentRepository := repository.NewAttachmentRepository(attachmentDAO)
	attachmentService := service.NewAttachmentService(basicService, attachmentRepository)
	tokenBuilder := jwt.NewJwtBuilder(db, commonRedisClient, config, userRepository)
	authMiddleware := middleware.NewAuthMiddleware(config, userRepository, tokenBuilder)
	attachmentApi := v1.NewAttachmentApi(routerGroup, attachmentService, authMiddleware, config)
	redisStore := captcha.NewRedisStore(commonRedisClient, config)
	captchaService := service.NewCaptchaService(redisStore)
	captchaApi := v1.NewCaptchaApi(routerGroup, captchaService)
	departmentApi := v1.NewDepartmentApi(routerGroup, departmentService, authMiddleware)
	permissionApi := v1.NewPermissionApi(routerGroup, permissionService, authMiddleware)
	pingService := service.NewPingService(basicService)
	pingApi := v1.NewPingApi(routerGroup, pingService, authMiddleware)
	roleService := service.NewRoleService(basicService, roleRepository, userRepository, permissionRepository)
	roleApi := v1.NewRoleApi(routerGroup, roleService, authMiddleware)
	userService := service.NewUserService(basicService, captchaService, roleRepository, userRepository, client, tokenBuilder)
	userApi := v1.NewUserApi(routerGroup, userService, authMiddleware)
	app := &App{
		logger:        sugaredLogger,
		conf:          config,
		jobManager:    systemJobManager,
		cacheManager:  systemCacheManager,
		httpServer:    httpServer,
		attachmentApi: attachmentApi,
		captchaApi:    captchaApi,
		departmentApi: departmentApi,
		permissionApi: permissionApi,
		pingApi:       pingApi,
		roleApi:       roleApi,
		userApi:       userApi,
	}
	return app
}
