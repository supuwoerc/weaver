// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	v1 "github.com/supuwoerc/weaver/api/v1"
	"github.com/supuwoerc/weaver/initialize"
	"github.com/supuwoerc/weaver/middleware"
	cache2 "github.com/supuwoerc/weaver/pkg/cache"
	"github.com/supuwoerc/weaver/pkg/captcha"
	"github.com/supuwoerc/weaver/pkg/job"
	"github.com/supuwoerc/weaver/pkg/jwt"
	"github.com/supuwoerc/weaver/pkg/logger"
	"github.com/supuwoerc/weaver/pkg/utils"
	"github.com/supuwoerc/weaver/providers"
	"github.com/supuwoerc/weaver/repository/cache"
	"github.com/supuwoerc/weaver/repository/dao"
	"github.com/supuwoerc/weaver/router"
	"github.com/supuwoerc/weaver/service"
	"go.uber.org/zap/zapcore"
	logger2 "gorm.io/gorm/logger"
)

// Injectors from wire.go:

func WireApp() *App {
	config := initialize.NewViper()
	writeSyncer := initialize.NewWriterSyncer(config)
	sugaredLogger := initialize.NewZapLogger(config, writeSyncer)
	loggerLogger := logger.NewLogger(sugaredLogger)
	dialer := initialize.NewDialer(config)
	emailClient := initialize.NewEmailClient(loggerLogger, dialer, config)
	cronLogger := initialize.NewCronLogger(loggerLogger, emailClient)
	cron := initialize.NewCronClient(cronLogger)
	v := providers.SystemJobs(loggerLogger)
	systemJobManager := job.NewSystemJobManager(cronLogger, cron, loggerLogger, v...)
	gormLogger := initialize.NewGormLogger(loggerLogger, config)
	db := initialize.NewGORM(config, gormLogger)
	redisLogger := initialize.NewRedisLogger(writeSyncer)
	commonRedisClient := initialize.NewRedisClient(redisLogger, config)
	redisLocksmith := utils.NewRedisLocksmith(loggerLogger, commonRedisClient, emailClient)
	basicService := service.NewBasicService(loggerLogger, db, redisLocksmith, config, emailClient)
	basicDAO := dao.NewBasicDao(db)
	departmentDAO := dao.NewDepartmentDAO(basicDAO)
	departmentCache := cache.NewDepartmentCache(commonRedisClient)
	userDAO := dao.NewUserDAO(basicDAO)
	departmentService := service.NewDepartmentService(basicService, departmentDAO, departmentCache, userDAO)
	permissionDAO := dao.NewPermissionDAO(basicDAO)
	roleDAO := dao.NewRoleDAO(basicDAO)
	permissionService := service.NewPermissionService(basicService, permissionDAO, roleDAO)
	v2 := providers.SystemCaches(departmentService, permissionService)
	systemCacheManager := cache2.NewSystemCacheManager(v2...)
	engine := initialize.NewEngine(writeSyncer, emailClient, loggerLogger, config)
	httpServer := initialize.NewServer(config, engine, loggerLogger)
	routerGroup := router.NewRouter(engine, config)
	userCache := cache.NewUserCache(commonRedisClient)
	tokenBuilder := jwt.NewJwtBuilder(db, commonRedisClient, config, userCache)
	authMiddleware := middleware.NewAuthMiddleware(config, userCache, tokenBuilder)
	basicApi := v1.NewBasicApi(routerGroup, loggerLogger, config, authMiddleware)
	attachmentDAO := dao.NewAttachmentDAO(basicDAO)
	attachmentService := service.NewAttachmentService(basicService, attachmentDAO)
	attachmentApi := v1.NewAttachmentApi(basicApi, attachmentService)
	redisStore := captcha.NewRedisStore(commonRedisClient, config)
	captchaService := service.NewCaptchaService(redisStore)
	captchaApi := v1.NewCaptchaApi(basicApi, captchaService)
	departmentApi := v1.NewDepartmentApi(basicApi, departmentService)
	permissionApi := v1.NewPermissionApi(basicApi, permissionService)
	pingService := service.NewPingService(basicService)
	pingApi := v1.NewPingApi(basicApi, pingService)
	roleService := service.NewRoleService(basicService, roleDAO, userDAO, permissionDAO)
	roleApi := v1.NewRoleApi(basicApi, roleService)
	userService := service.NewUserService(basicService, captchaService, userDAO, emailClient, tokenBuilder)
	userApi := v1.NewUserApi(basicApi, userService)
	app := &App{
		logger:        loggerLogger,
		conf:          config,
		jobManager:    systemJobManager,
		cacheManager:  systemCacheManager,
		httpServer:    httpServer,
		attachmentApi: attachmentApi,
		captchaApi:    captchaApi,
		departmentApi: departmentApi,
		permissionApi: permissionApi,
		pingApi:       pingApi,
		roleApi:       roleApi,
		userApi:       userApi,
	}
	return app
}

// wire.go:

var loggerProvider = wire.NewSet(wire.Bind(new(utils.LocksmithLogger), new(*logger.Logger)), wire.Bind(new(initialize.ClientLogger), new(*logger.Logger)), logger.NewLogger)

var gormLoggerProvider = wire.NewSet(wire.Bind(new(logger2.Interface), new(*initialize.GormLogger)), initialize.NewGormLogger)

var redisLoggerProvider = wire.NewSet(wire.Bind(new(redis.Hook), new(*initialize.RedisLogger)), initialize.NewRedisLogger)

var emailProvider = wire.NewSet(wire.Bind(new(utils.LocksmithEmailClient), new(*initialize.EmailClient)), initialize.NewEmailClient)

var syncerProvider = wire.NewSet(wire.Bind(new(initialize.RedisLogSyncer), new(zapcore.WriteSyncer)), wire.Bind(new(initialize.EngineLogger), new(zapcore.WriteSyncer)), initialize.NewWriterSyncer)

var enginProvider = wire.NewSet(wire.Bind(new(http.Handler), new(*gin.Engine)), initialize.NewEngine)
